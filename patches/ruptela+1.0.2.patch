diff --git a/node_modules/ruptela/lib/index.js b/node_modules/ruptela/lib/index.js
index 83177ec..0b1b672 100644
--- a/node_modules/ruptela/lib/index.js
+++ b/node_modules/ruptela/lib/index.js
@@ -1,77 +1,100 @@
-'use strict';
+const Iterator = require('./iterator');
 
-/**
- * Module dependencies
- */
-const Base = require('./base'),
-        Commander = require('./commander'),
-        Crc = require('./crc'),
-        Iterator = require('./iterator');
+function parse(buffer) {
+  const iterator = new Iterator(buffer);
+  const records = [];
 
-/**
- * Process buffer
- * 
- * @param {Buffer} buffer
- * @returns {Object}
- */
-function process(buffer) {
-    //set buffer iterator
-    const bufIt = new Iterator(buffer);
-    const bufEnd = bufIt.end;
-    //get base
-    const base = new Base();
-    if (base.fieldsLength > bufEnd) {
-        throw new Error("Buffer size is too small");
-    }
-    //get base fields
-    const fields = base.fields;
-    //read CRC, last 2 bytes from buffer
-    const crc = bufIt.buffer.readUIntBE(bufEnd - fields.crc, fields.crc);
-    //slice first and last 2 bytes from buffer
-    const tmpBuffer = bufIt.buffer.slice(fields.packet_length, -fields.crc);
-    //compare CRC codes (read with calculated)
-    if (crc !== Crc.calculate(tmpBuffer)) {
-        throw new Error("CRC is not valid");
-    }
-    //init data
-    const data = {};
-    //read packet length
-    data.packet_length = bufIt.readNext(fields.packet_length);
-    if (data.packet_length !== (bufEnd - fields.packet_length - fields.crc)) {
-        throw new Error("Packet Length is not valid");
-    }
-    //read IMEI
-    data.imei = bufIt.readNext(fields.imei);
-    //read command ID
-    data.command_id = bufIt.readNext(fields.command_id);
-    //execute command
-    const commander = new Commander(data.command_id);
-    commander.command.execute(bufIt);
-    //assign command data to payload
-    data.payload = commander.command.data;
-    //assign CRC as last field
-    data.crc = crc;
-    //return data and acknowledgement
-    return {data, ack: commander.command.ack};
-}
-
-/**
- * Process buffer
- * 
- * @param {Buffer} buffer
- * @returns {Object}
- */
-function main(buffer) {
+  while (iterator.hasNext()) {
     try {
-        //Process buffer and return object containing data and acknowledgement
-        return process(buffer);
+      const record = processRecord(iterator);
+      records.push(record);
     } catch (error) {
-        //Return Error object
-        return {error: error};
+      iterator.emit('error', error);
+      break;
     }
+  }
+
+  return records;
+}
+
+function processRecord(iterator) {
+  const startPosition = iterator.position;
+
+  // --- Header (25 bytes) ---
+  const header = {
+    timestamp: iterator.readNext(4),
+    timestampExtension: iterator.readNext(1),
+    recordExtension: iterator.readNext(1),
+    priority: iterator.readNext(1),
+    longitude: iterator.readNext(4),
+    latitude: iterator.readNext(4),
+    altitude: iterator.readNext(2),
+    angle: iterator.readNext(2),
+    satellites: iterator.readNext(1),
+    speed: iterator.readNext(2),
+    hdop: iterator.readNext(1),
+    eventId: iterator.readNext(2)
+  };
+
+  // --- Body: IO elements por tamaño ---
+  const ioElements = [];
+
+  // 1-byte values
+  const count1 = iterator.readNext(1);
+  for (let i = 0; i < count1; i++) {
+    ioElements.push({
+      id: iterator.readNext(2),      // ID = 2 bytes
+      value: iterator.readNext(1)    // Value = 1 byte
+    });
+  }
+
+  // 2-byte values
+  const count2 = iterator.readNext(1);
+  for (let i = 0; i < count2; i++) {
+    ioElements.push({
+      id: iterator.readNext(2),      // ID = 2 bytes
+      value: iterator.readNext(2)    // Value = 2 bytes
+    });
+  }
+
+  // 4-byte values
+  const count4 = iterator.readNext(1);
+  for (let i = 0; i < count4; i++) {
+    ioElements.push({
+      id: iterator.readNext(2),      // ID = 2 bytes
+      value: iterator.readNext(4)    // Value = 4 bytes
+    });
+  }
+
+  // 8-byte values
+  const count8 = iterator.readNext(1);
+  for (let i = 0; i < count8; i++) {
+    const raw = iterator.readNext(8);
+    ioElements.push({
+      id: iterator.readNext(2),      // ID = 2 bytes
+      value: typeof raw === 'bigint' ? Number(raw) : raw
+    });
+  }
+
+  // --- Construir registro final ---
+  return {
+    header: {
+      timestamp: header.timestamp,
+      timestampExtension: header.timestampExtension,
+      recordExtension: header.recordExtension,
+      priority: header.priority,
+      longitude: header.longitude / 10000000,
+      latitude: header.latitude / 10000000,
+      altitude: header.altitude / 10,
+      angle: header.angle / 100,
+      satellites: header.satellites,
+      speed: header.speed / 10,
+      hdop: header.hdop / 10,
+      eventId: header.eventId
+    },
+    ioElements,
+    rawLength: iterator.position - startPosition
+  };
 }
 
-/**
- * Expose main function
- */
-module.exports = main;
\ No newline at end of file
+module.exports = { parse };
diff --git a/node_modules/ruptela/lib/iterator.js b/node_modules/ruptela/lib/iterator.js
index 926f427..105ae59 100644
--- a/node_modules/ruptela/lib/iterator.js
+++ b/node_modules/ruptela/lib/iterator.js
@@ -1,69 +1,54 @@
-'use strict';
+const { EventEmitter } = require('events');
+
+class Iterator extends EventEmitter {
+  constructor(buffer) {
+    super();
+    this.buffer = buffer;
+    this.position = 0;
+  }
+
+  readNext(byteLength) {
+    // Validación extendida para 8 bytes
+    if (byteLength < 1 || byteLength > 8) {
+      throw new Error(`Invalid byte length: ${byteLength}`);
+    }
 
-let buffer, offset;
+    if (this.position + byteLength > this.buffer.length) {
+      throw new Error('Buffer underflow');
+    }
 
-/**
- * This class iterates through buffer
- */
-class Iterator {
+    let value;
     
-    /**
-     * Set buffer
-     * 
-     * @param {Buffer} buf
-     */
-    constructor(buf) {
-        //check if buffer is truly a buffer
-        if (!Buffer.isBuffer(buf)) {
-            throw new Error("Input must be an instance of Buffer");
-        }
-        //set buffer
-        buffer = buf;
-        offset = 0;
+    // Lectura de 8 bytes (Big Endian)
+    if (byteLength === 8) {
+      value = this.buffer.readBigUInt64BE(this.position);
+    } else {
+      value = this.buffer.readUIntBE(this.position, byteLength);
     }
 
-    /**
-     * Get buffer
-     */
-    get buffer() {
-        return buffer;
-    }
+    this.position += byteLength;
     
-    /**
-     * Get offset
-     */
-    get offset() {
-        return offset;
-    }
+    // Conversión de BigInt a Number para compatibilidad
+    return typeof value === 'bigint' ? Number(value) : value;
+  }
 
-    /**
-     * Get end of buffer
-     */
-    get end() {
-        return buffer.length;
+  readBytes(byteLength) {
+    if (this.position + byteLength > this.buffer.length) {
+      throw new Error('Buffer underflow');
     }
 
-    /**
-     * Reads byteLength number of bytes from buffer at the specified offset 
-     * and interprets the result as an (unsigned) integer
-     * 
-     * @param {int} byteLength
-     * @param {boolean} unsigned
-     * @returns {int}
-     */
-    readNext(byteLength, unsigned = true) {
-        const tmpOffset = offset;
-        offset += byteLength;
-        //check if an unsigned integer should be returned
-        if (unsigned === true) {
-            return buffer.readUIntBE(tmpOffset, byteLength);
-        }
-        return buffer.readIntBE(tmpOffset, byteLength);
-    }
+    const value = this.buffer.subarray(
+      this.position,
+      this.position + byteLength
+    );
+    
+    this.position += byteLength;
+    return value;
+  }
 
+  hasNext() {
+    return this.position < this.buffer.length;
+  }
 }
 
-/**
- * Expose class
- */
 module.exports = Iterator;
\ No newline at end of file
