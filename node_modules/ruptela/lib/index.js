const Iterator = require('./iterator');

function parse(buffer) {
  const iterator = new Iterator(buffer);
  const records = [];

  while (iterator.hasNext()) {
    try {
      const record = processRecord(iterator);
      records.push(record);
    } catch (error) {
      iterator.emit('error', error);
      break;
    }
  }

  return records;
}

function processRecord(iterator) {
  const startPosition = iterator.position;

  // Parsear header
  const header = {
    timestamp: iterator.readNext(4),
    timestampExtension: iterator.readNext(1),
    recordExtension: iterator.readNext(1),
    priority: iterator.readNext(1),
    longitude: iterator.readNext(4),
    latitude: iterator.readNext(4),
    altitude: iterator.readNext(2),
    angle: iterator.readNext(2),
    satellites: iterator.readNext(1),
    speed: iterator.readNext(2),
    hdop: iterator.readNext(1),
    eventId: iterator.readNext(2)
  };

  // Procesar elementos IO
  const ioElements = [];
  while (iterator.hasNext()) {
    const valueSize = iterator.readNext(1);
    const numberOfElements = iterator.readNext(1);

    if (![1, 2, 4, 8].includes(valueSize)) {
      throw new Error(`Tamaño de valor IO no soportado: ${valueSize}`);
    }

    for (let i = 0; i < numberOfElements; i++) {
      const element = {
        id: iterator.readNext(2),
        value: valueSize === 8 ? 
          Number(iterator.readNext(8)) : // Conversión BigInt a Number
          iterator.readNext(valueSize)
      };
      ioElements.push(element);
    }
  }

  // Retornar objeto con estructura corregida
  return {
    header: {
      timestamp: header.timestamp,
      timestampExtension: header.timestampExtension,
      recordExtension: header.recordExtension,
      priority: header.priority,
      longitude: header.longitude / 10000000,
      latitude: header.latitude / 10000000,
      altitude: header.altitude / 10,
      angle: header.angle / 100,
      satellites: header.satellites,
      speed: header.speed / 10,
      hdop: header.hdop / 10,
      eventId: header.eventId
    },
    ioElements: ioElements,
    rawLength: iterator.position - startPosition
  };
}

module.exports = { parse };