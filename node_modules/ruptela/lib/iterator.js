const { EventEmitter } = require('events');

class Iterator extends EventEmitter {
  constructor(buffer) {
    super();
    this.buffer = buffer;
    this.position = 0;
  }

  readNext(byteLength) {
    // Validación extendida para 8 bytes
    if (byteLength < 1 || byteLength > 8) {
      throw new Error(`Invalid byte length: ${byteLength}`);
    }

    if (this.position + byteLength > this.buffer.length) {
      throw new Error('Buffer underflow');
    }

    let value;
    
    // Lectura de 8 bytes (Big Endian)
    if (byteLength === 8) {
      value = this.buffer.readBigUInt64BE(this.position);
    } else {
      value = this.buffer.readUIntBE(this.position, byteLength);
    }

    this.position += byteLength;
    
    // Conversión de BigInt a Number para compatibilidad
    return typeof value === 'bigint' ? Number(value) : value;
  }

  readBytes(byteLength) {
    if (this.position + byteLength > this.buffer.length) {
      throw new Error('Buffer underflow');
    }

    const value = this.buffer.subarray(
      this.position,
      this.position + byteLength
    );
    
    this.position += byteLength;
    return value;
  }

  hasNext() {
    return this.position < this.buffer.length;
  }
}

module.exports = Iterator;