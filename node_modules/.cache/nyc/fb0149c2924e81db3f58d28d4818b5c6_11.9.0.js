'use strict';/**
 * Module dependencies
 */var cov_ag3ouh1bk=function(){var path='C:\\Users\\Hubei\\Documents\\ruptela-master\\ruptela-master\\lib\\command\\command_1_68.js',hash='c6939c1c9bf830a7c75e842255d765a9d51f3f5b',Function=function(){}.constructor,global=new Function('return this')(),gcv='__coverage__',coverageData={path:'C:\\Users\\Hubei\\Documents\\ruptela-master\\ruptela-master\\lib\\command\\command_1_68.js',statementMap:{'0':{start:{line:6,column:16},end:{line:6,column:37}},'1':{start:{line:7,column:23},end:{line:7,column:57}},'2':{start:{line:21,column:8},end:{line:23,column:9}},'3':{start:{line:22,column:12},end:{line:22,column:88}},'4':{start:{line:24,column:8},end:{line:24,column:23}},'5':{start:{line:35,column:30},end:{line:35,column:49}},'6':{start:{line:37,column:23},end:{line:37,column:36}},'7':{start:{line:39,column:21},end:{line:39,column:77}},'8':{start:{line:40,column:8},end:{line:42,column:9}},'9':{start:{line:41,column:12},end:{line:41,column:57}},'10':{start:{line:44,column:8},end:{line:44,column:76}},'11':{start:{line:45,column:8},end:{line:47,column:9}},'12':{start:{line:46,column:12},end:{line:46,column:71}},'13':{start:{line:49,column:8},end:{line:49,column:78}},'14':{start:{line:50,column:8},end:{line:52,column:9}},'15':{start:{line:51,column:12},end:{line:51,column:62}},'16':{start:{line:54,column:23},end:{line:54,column:43}},'17':{start:{line:55,column:29},end:{line:55,column:42}},'18':{start:{line:56,column:8},end:{line:56,column:63}},'19':{start:{line:58,column:8},end:{line:60,column:9}},'20':{start:{line:59,column:12},end:{line:59,column:66}},'21':{start:{line:62,column:8},end:{line:62,column:31}},'22':{start:{line:64,column:8},end:{line:101,column:9}},'23':{start:{line:66,column:24},end:{line:66,column:26}},'24':{start:{line:68,column:12},end:{line:76,column:13}},'25':{start:{line:69,column:16},end:{line:75,column:17}},'26':{start:{line:71,column:20},end:{line:71,column:75}},'27':{start:{line:74,column:20},end:{line:74,column:68}},'28':{start:{line:78,column:12},end:{line:78,column:24}},'29':{start:{line:80,column:32},end:{line:80,column:33}},'30':{start:{line:82,column:12},end:{line:98,column:13}},'31':{start:{line:84,column:26},end:{line:84,column:62}},'32':{start:{line:85,column:16},end:{line:95,column:17}},'33':{start:{line:87,column:20},end:{line:94,column:21}},'34':{start:{line:89,column:37},end:{line:89,column:70}},'35':{start:{line:91,column:41},end:{line:91,column:82}},'36':{start:{line:93,column:24},end:{line:93,column:79}},'37':{start:{line:97,column:16},end:{line:97,column:47}},'38':{start:{line:100,column:12},end:{line:100,column:40}},'39':{start:{line:103,column:8},end:{line:103,column:54}},'40':{start:{line:110,column:0},end:{line:110,column:30}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:19,column:4},end:{line:19,column:5}},loc:{start:{line:19,column:25},end:{line:25,column:5}},line:19},'1':{name:'(anonymous_1)',decl:{start:{line:33,column:4},end:{line:33,column:5}},loc:{start:{line:33,column:19},end:{line:104,column:5}},line:33}},branchMap:{'0':{loc:{start:{line:21,column:8},end:{line:23,column:9}},type:'if',locations:[{start:{line:21,column:8},end:{line:23,column:9}},{start:{line:21,column:8},end:{line:23,column:9}}],line:21},'1':{loc:{start:{line:40,column:8},end:{line:42,column:9}},type:'if',locations:[{start:{line:40,column:8},end:{line:42,column:9}},{start:{line:40,column:8},end:{line:42,column:9}}],line:40},'2':{loc:{start:{line:45,column:8},end:{line:47,column:9}},type:'if',locations:[{start:{line:45,column:8},end:{line:47,column:9}},{start:{line:45,column:8},end:{line:47,column:9}}],line:45},'3':{loc:{start:{line:45,column:12},end:{line:45,column:72}},type:'binary-expr',locations:[{start:{line:45,column:12},end:{line:45,column:40}},{start:{line:45,column:44},end:{line:45,column:72}}],line:45},'4':{loc:{start:{line:50,column:8},end:{line:52,column:9}},type:'if',locations:[{start:{line:50,column:8},end:{line:52,column:9}},{start:{line:50,column:8},end:{line:52,column:9}}],line:50},'5':{loc:{start:{line:58,column:8},end:{line:60,column:9}},type:'if',locations:[{start:{line:58,column:8},end:{line:60,column:9}},{start:{line:58,column:8},end:{line:60,column:9}}],line:58},'6':{loc:{start:{line:69,column:16},end:{line:75,column:17}},type:'if',locations:[{start:{line:69,column:16},end:{line:75,column:17}},{start:{line:69,column:16},end:{line:75,column:17}}],line:69},'7':{loc:{start:{line:69,column:20},end:{line:69,column:77}},type:'binary-expr',locations:[{start:{line:69,column:20},end:{line:69,column:37}},{start:{line:69,column:41},end:{line:69,column:57}},{start:{line:69,column:61},end:{line:69,column:77}}],line:69},'8':{loc:{start:{line:85,column:16},end:{line:95,column:17}},type:'if',locations:[{start:{line:85,column:16},end:{line:95,column:17}},{start:{line:85,column:16},end:{line:95,column:17}}],line:85}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0,'35':0,'36':0,'37':0,'38':0,'39':0,'40':0},f:{'0':0,'1':0},b:{'0':[0,0],'1':[0,0],'2':[0,0],'3':[0,0],'4':[0,0],'5':[0,0],'6':[0,0],'7':[0,0,0],'8':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const Command=(cov_ag3ouh1bk.s[0]++,require('../command')),Payload_1_68=(cov_ag3ouh1bk.s[1]++,require('../payload/command_1_68'));/**
 * This class handles payload for command 1 and 68
 */class Command_1_68 extends(Command){/**
     * Set payload for command 1 and 68
     * 
     * @param {Payload_1_68} payload
     */constructor(payload){cov_ag3ouh1bk.f[0]++;cov_ag3ouh1bk.s[2]++;//check if payload is truly a payload for command 1 and 68
if(!(payload instanceof Payload_1_68)){cov_ag3ouh1bk.b[0][0]++;cov_ag3ouh1bk.s[3]++;throw new Error("Command_1_68 payload must be an instance of Payload_1_68");}else{cov_ag3ouh1bk.b[0][1]++;}cov_ag3ouh1bk.s[4]++;super(payload);}/**
     * Execute command
     * Process buffer in order to extract the command's payload
     * 
     * @param {Iterator} bufIt
     */execute(bufIt){cov_ag3ouh1bk.f[1]++;//get command payload fields
const payloadFields=(cov_ag3ouh1bk.s[5]++,this.payload.fields);//get end of buffer
const bufEnd=(cov_ag3ouh1bk.s[6]++,bufIt.end-2);//check buffer size for next 2 fields (records_left and records_total)
let tmpLen=(cov_ag3ouh1bk.s[7]++,payloadFields.records_left+payloadFields.records_total);cov_ag3ouh1bk.s[8]++;if(bufIt.offset+tmpLen>bufEnd){cov_ag3ouh1bk.b[1][0]++;cov_ag3ouh1bk.s[9]++;throw new Error("Payload size is too small");}else{cov_ag3ouh1bk.b[1][1]++;}//read records left flag
cov_ag3ouh1bk.s[10]++;this.data.records_left=bufIt.readNext(payloadFields.records_left);cov_ag3ouh1bk.s[11]++;if((cov_ag3ouh1bk.b[3][0]++,this.data.records_left!==0)&&(cov_ag3ouh1bk.b[3][1]++,this.data.records_left!==1)){cov_ag3ouh1bk.b[2][0]++;cov_ag3ouh1bk.s[12]++;throw new Error("Payload: Records left flag is not valid");}else{cov_ag3ouh1bk.b[2][1]++;}//read total number of records
cov_ag3ouh1bk.s[13]++;this.data.records_total=bufIt.readNext(payloadFields.records_total);cov_ag3ouh1bk.s[14]++;if(this.data.records_total<1){cov_ag3ouh1bk.b[4][0]++;cov_ag3ouh1bk.s[15]++;throw new Error("Payload: Records are not found");}else{cov_ag3ouh1bk.b[4][1]++;}//get record fields
const record=(cov_ag3ouh1bk.s[16]++,payloadFields.record);const recordFields=(cov_ag3ouh1bk.s[17]++,record.fields);cov_ag3ouh1bk.s[18]++;tmpLen=this.data.records_total*record.fieldsLength;//check buffer size for next N (records_total) records
cov_ag3ouh1bk.s[19]++;if(bufIt.offset+tmpLen>bufEnd){cov_ag3ouh1bk.b[5][0]++;cov_ag3ouh1bk.s[20]++;throw new Error("Payload: Records size is too small");}else{cov_ag3ouh1bk.b[5][1]++;}//init records
cov_ag3ouh1bk.s[21]++;this.data.records=[];//iterate records
cov_ag3ouh1bk.s[22]++;while(bufIt.offset<bufEnd){//init new record
const rec=(cov_ag3ouh1bk.s[23]++,{});//iterate record header fields
cov_ag3ouh1bk.s[24]++;for(let f in recordFields.header){cov_ag3ouh1bk.s[25]++;if((cov_ag3ouh1bk.b[7][0]++,f==='longitude')||(cov_ag3ouh1bk.b[7][1]++,f==='latitude')||(cov_ag3ouh1bk.b[7][2]++,f==='altitude')){cov_ag3ouh1bk.b[6][0]++;cov_ag3ouh1bk.s[26]++;//these fields have signed integers
rec[f]=bufIt.readNext(recordFields.header[f],false);}else{cov_ag3ouh1bk.b[6][1]++;cov_ag3ouh1bk.s[27]++;//these fields have unsigned integers
rec[f]=bufIt.readNext(recordFields.header[f]);}}//init IO
cov_ag3ouh1bk.s[28]++;rec.io={};//IO Value length - 1, 2, 4, 8 bytes
let ioValueLength=(cov_ag3ouh1bk.s[29]++,1);//iterate record body fields
cov_ag3ouh1bk.s[30]++;for(let f in recordFields.body){//get the total number of IO records, with length of N bytes
const n=(cov_ag3ouh1bk.s[31]++,bufIt.readNext(recordFields.body[f]));cov_ag3ouh1bk.s[32]++;if(n>0){cov_ag3ouh1bk.b[8][0]++;cov_ag3ouh1bk.s[33]++;//iterate through IO records
for(let i=0;i<n;++i){//get IO ID
const ioId=(cov_ag3ouh1bk.s[34]++,bufIt.readNext(record.ioIdLength));//check if IO ID has unsigned integer value
const unsigned=(cov_ag3ouh1bk.s[35]++,!record.ioIdSignedIntegers.includes(ioId));//set value for IO ID
cov_ag3ouh1bk.s[36]++;rec.io[ioId]=bufIt.readNext(ioValueLength,unsigned);}}else{cov_ag3ouh1bk.b[8][1]++;}//in each iteration, increment IO Value length (1, 2, 4, 8)
cov_ag3ouh1bk.s[37]++;ioValueLength+=ioValueLength;}//push new record to records
cov_ag3ouh1bk.s[38]++;this.data.records.push(rec);}//set acknowledgement
cov_ag3ouh1bk.s[39]++;this.ack=Buffer.from("0002640113bc","hex");}}/**
 * Expose class
 */cov_ag3ouh1bk.s[40]++;module.exports=Command_1_68;