'use strict';/**
 * Module dependencies
 */var cov_1v88y7oqh2=function(){var path='C:\\Users\\Hubei\\Documents\\ruptela-master\\ruptela-master\\lib\\index.js',hash='68fc2b43dce054687f67594e3232790159ae5233',Function=function(){}.constructor,global=new Function('return this')(),gcv='__coverage__',coverageData={path:'C:\\Users\\Hubei\\Documents\\ruptela-master\\ruptela-master\\lib\\index.js',statementMap:{'0':{start:{line:6,column:13},end:{line:6,column:30}},'1':{start:{line:7,column:20},end:{line:7,column:42}},'2':{start:{line:8,column:14},end:{line:8,column:30}},'3':{start:{line:9,column:19},end:{line:9,column:40}},'4':{start:{line:19,column:18},end:{line:19,column:38}},'5':{start:{line:20,column:19},end:{line:20,column:28}},'6':{start:{line:22,column:17},end:{line:22,column:27}},'7':{start:{line:23,column:4},end:{line:25,column:5}},'8':{start:{line:24,column:8},end:{line:24,column:52}},'9':{start:{line:27,column:19},end:{line:27,column:30}},'10':{start:{line:29,column:16},end:{line:29,column:72}},'11':{start:{line:31,column:22},end:{line:31,column:75}},'12':{start:{line:33,column:4},end:{line:35,column:5}},'13':{start:{line:34,column:8},end:{line:34,column:44}},'14':{start:{line:37,column:17},end:{line:37,column:19}},'15':{start:{line:39,column:4},end:{line:39,column:62}},'16':{start:{line:40,column:4},end:{line:42,column:5}},'17':{start:{line:41,column:8},end:{line:41,column:54}},'18':{start:{line:44,column:4},end:{line:44,column:44}},'19':{start:{line:46,column:4},end:{line:46,column:56}},'20':{start:{line:48,column:22},end:{line:48,column:52}},'21':{start:{line:49,column:4},end:{line:49,column:37}},'22':{start:{line:51,column:4},end:{line:51,column:42}},'23':{start:{line:53,column:4},end:{line:53,column:19}},'24':{start:{line:55,column:4},end:{line:55,column:46}},'25':{start:{line:65,column:4},end:{line:71,column:5}},'26':{start:{line:67,column:8},end:{line:67,column:31}},'27':{start:{line:70,column:8},end:{line:70,column:30}},'28':{start:{line:77,column:0},end:{line:77,column:22}}},fnMap:{'0':{name:'process',decl:{start:{line:17,column:9},end:{line:17,column:16}},loc:{start:{line:17,column:25},end:{line:56,column:1}},line:17},'1':{name:'main',decl:{start:{line:64,column:9},end:{line:64,column:13}},loc:{start:{line:64,column:22},end:{line:72,column:1}},line:64}},branchMap:{'0':{loc:{start:{line:23,column:4},end:{line:25,column:5}},type:'if',locations:[{start:{line:23,column:4},end:{line:25,column:5}},{start:{line:23,column:4},end:{line:25,column:5}}],line:23},'1':{loc:{start:{line:33,column:4},end:{line:35,column:5}},type:'if',locations:[{start:{line:33,column:4},end:{line:35,column:5}},{start:{line:33,column:4},end:{line:35,column:5}}],line:33},'2':{loc:{start:{line:40,column:4},end:{line:42,column:5}},type:'if',locations:[{start:{line:40,column:4},end:{line:42,column:5}},{start:{line:40,column:4},end:{line:42,column:5}}],line:40}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0},f:{'0':0,'1':0},b:{'0':[0,0],'1':[0,0],'2':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const Base=(cov_1v88y7oqh2.s[0]++,require('./base')),Commander=(cov_1v88y7oqh2.s[1]++,require('./commander')),Crc=(cov_1v88y7oqh2.s[2]++,require('./crc')),Iterator=(cov_1v88y7oqh2.s[3]++,require('./iterator'));/**
 * Process buffer
 * 
 * @param {Buffer} buffer
 * @returns {Object}
 */function process(buffer){cov_1v88y7oqh2.f[0]++;//set buffer iterator
const bufIt=(cov_1v88y7oqh2.s[4]++,new Iterator(buffer));const bufEnd=(cov_1v88y7oqh2.s[5]++,bufIt.end);//get base
const base=(cov_1v88y7oqh2.s[6]++,new Base());cov_1v88y7oqh2.s[7]++;if(base.fieldsLength>bufEnd){cov_1v88y7oqh2.b[0][0]++;cov_1v88y7oqh2.s[8]++;throw new Error("Buffer size is too small");}else{cov_1v88y7oqh2.b[0][1]++;}//get base fields
const fields=(cov_1v88y7oqh2.s[9]++,base.fields);//read CRC, last 2 bytes from buffer
const crc=(cov_1v88y7oqh2.s[10]++,bufIt.buffer.readUIntBE(bufEnd-fields.crc,fields.crc));//slice first and last 2 bytes from buffer
const tmpBuffer=(cov_1v88y7oqh2.s[11]++,bufIt.buffer.slice(fields.packet_length,-fields.crc));//compare CRC codes (read with calculated)
cov_1v88y7oqh2.s[12]++;if(crc!==Crc.calculate(tmpBuffer)){cov_1v88y7oqh2.b[1][0]++;cov_1v88y7oqh2.s[13]++;throw new Error("CRC is not valid");}else{cov_1v88y7oqh2.b[1][1]++;}//init data
const data=(cov_1v88y7oqh2.s[14]++,{});//read packet length
cov_1v88y7oqh2.s[15]++;data.packet_length=bufIt.readNext(fields.packet_length);cov_1v88y7oqh2.s[16]++;if(data.packet_length!==bufEnd-fields.packet_length-fields.crc){cov_1v88y7oqh2.b[2][0]++;cov_1v88y7oqh2.s[17]++;throw new Error("Packet Length is not valid");}else{cov_1v88y7oqh2.b[2][1]++;}//read IMEI
cov_1v88y7oqh2.s[18]++;data.imei=bufIt.readNext(fields.imei);//read command ID
cov_1v88y7oqh2.s[19]++;data.command_id=bufIt.readNext(fields.command_id);//execute command
const commander=(cov_1v88y7oqh2.s[20]++,new Commander(data.command_id));cov_1v88y7oqh2.s[21]++;commander.command.execute(bufIt);//assign command data to payload
cov_1v88y7oqh2.s[22]++;data.payload=commander.command.data;//assign CRC as last field
cov_1v88y7oqh2.s[23]++;data.crc=crc;//return data and acknowledgement
cov_1v88y7oqh2.s[24]++;return{data,ack:commander.command.ack};}/**
 * Process buffer
 * 
 * @param {Buffer} buffer
 * @returns {Object}
 */function main(buffer){cov_1v88y7oqh2.f[1]++;cov_1v88y7oqh2.s[25]++;try{cov_1v88y7oqh2.s[26]++;//Process buffer and return object containing data and acknowledgement
return process(buffer);}catch(error){cov_1v88y7oqh2.s[27]++;//Return Error object
return{error:error};}}/**
 * Expose main function
 */cov_1v88y7oqh2.s[28]++;module.exports=main;