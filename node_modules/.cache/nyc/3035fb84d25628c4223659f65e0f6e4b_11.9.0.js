'use strict';/**
 * Module dependencies
 */var cov_2giqe20g2a=function(){var path='C:\\Users\\Hubei\\Documents\\ruptela-master\\ruptela-master\\lib\\record_extended.js',hash='dad93b6fde34bd7c7a4e3d1a33139fd687d46982',Function=function(){}.constructor,global=new Function('return this')(),gcv='__coverage__',coverageData={path:'C:\\Users\\Hubei\\Documents\\ruptela-master\\ruptela-master\\lib\\record_extended.js',statementMap:{'0':{start:{line:6,column:15},end:{line:6,column:34}},'1':{start:{line:18,column:8},end:{line:18,column:16}},'2':{start:{line:20,column:16},end:{line:20,column:17}},'3':{start:{line:21,column:23},end:{line:21,column:25}},'4':{start:{line:21,column:42},end:{line:21,column:60}},'5':{start:{line:24,column:8},end:{line:34,column:9}},'6':{start:{line:25,column:12},end:{line:30,column:13}},'7':{start:{line:29,column:16},end:{line:29,column:44}},'8':{start:{line:32,column:12},end:{line:32,column:48}},'9':{start:{line:33,column:12},end:{line:33,column:16}},'10':{start:{line:38,column:8},end:{line:38,column:36}},'11':{start:{line:40,column:8},end:{line:40,column:41}},'12':{start:{line:42,column:8},end:{line:42,column:29}},'13':{start:{line:49,column:0},end:{line:49,column:32}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:17,column:4},end:{line:17,column:5}},loc:{start:{line:17,column:18},end:{line:43,column:5}},line:17}},branchMap:{'0':{loc:{start:{line:25,column:12},end:{line:30,column:13}},type:'if',locations:[{start:{line:25,column:12},end:{line:30,column:13}},{start:{line:25,column:12},end:{line:30,column:13}}],line:25}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0},f:{'0':0},b:{'0':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const Record=(cov_2giqe20g2a.s[0]++,require('./record'));/**
 * Extended record consists of 2 parts: header (25 bytes) and body (4-101 bytes).
 * Maximum record size is 126 bytes.
 */class RecordExtended extends(Record){/**
     * Set extended record
     */constructor(){cov_2giqe20g2a.f[0]++;cov_2giqe20g2a.s[1]++;super();let i=(cov_2giqe20g2a.s[2]++,1);const fields=(cov_2giqe20g2a.s[3]++,{}),headerFields=(cov_2giqe20g2a.s[4]++,this.fields.header);//Iterate over record header fields,
//so that a new field can be added in between.
cov_2giqe20g2a.s[5]++;for(let field in headerFields){cov_2giqe20g2a.s[6]++;if(i===3){cov_2giqe20g2a.b[0][0]++;cov_2giqe20g2a.s[7]++;//Add new field at third position.
//Separates records with same timestamp and timestamp extension.
//Indicates if some data does not fit into one record.
fields.record_extension=1;}else{cov_2giqe20g2a.b[0][1]++;}//Add the rest of the fields
cov_2giqe20g2a.s[8]++;fields[field]=headerFields[field];cov_2giqe20g2a.s[9]++;++i;}/**
         * Set extended record header fields
         */cov_2giqe20g2a.s[10]++;this.fields.header=fields;//Add an extra byte for event ID number.
cov_2giqe20g2a.s[11]++;this.fields.header.event_id+=1;//Add an extra byte for IO ID length.
cov_2giqe20g2a.s[12]++;this.ioIdLength+=1;}}/**
 * Expose class
 */cov_2giqe20g2a.s[13]++;module.exports=RecordExtended;